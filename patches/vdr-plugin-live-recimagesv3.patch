diff --git a/PLUGINS/src/live/epg_events.cpp b/PLUGINS/src/live/epg_events.cpp
index cd4996e..4442757 100644
--- a/PLUGINS/src/live/epg_events.cpp
+++ b/PLUGINS/src/live/epg_events.cpp
@@ -179,7 +179,12 @@ namespace vdrlive
 		}
 		return m_archived;
 	}
-
+	
+	const string EpgRecording::FileName() const
+	{
+	    return m_recording->FileName();
+	}
+	
 	time_t EpgRecording::GetStartTime() const
 	{
 #if VDRVERSNUM < 10726
@@ -323,6 +328,40 @@ namespace vdrlive
 			}
 			return found;
 		}
+		
+		bool ScanForRecImages(string const & imageId, string const & recfolder , list<string> & images)
+		{
+			bool found = false;
+			const string filetypes[] = {"png", "jpg", "PNG", "JPG"};
+			int size = sizeof(filetypes)/sizeof(filetypes[0]);
+
+			for (int j = 0;j < size;j++)
+			{
+			    const string filemask(recfolder + "/*." + filetypes[j]);
+			    glob_t globbuf;
+			    globbuf.gl_offs = 0;
+			    if (glob(filemask.c_str(), GLOB_DOOFFS, NULL, &globbuf) == 0) {
+				for(size_t i = 0; i < globbuf.gl_pathc; i++) {
+					const string imagefile(globbuf.gl_pathv[i]);
+					const string imagecopy(imagefile);
+					
+					size_t delimPos = imagefile.find_last_of('/');
+					images.push_back(imagefile.substr(delimPos+1));
+					
+					//create a temporary symlink of the image im tmp
+					const string imagename(imagefile.substr(delimPos+1));
+					const string tmpfile("/tmp/" + imageId + "_" + imagename);
+					
+					char cmdBuff[500];
+					sprintf(cmdBuff,"ln -s \"%s\" \"%s\"",imagefile.c_str(),tmpfile.c_str());
+					system(cmdBuff);
+					found = true;
+				}
+				globfree(&globbuf);
+			    }
+			}
+			return found;
+		}		
 
 		list<string> EpgImages(string const &epgid)
 		{
@@ -366,6 +405,18 @@ namespace vdrlive
 			return images;
 		}
 
+		list<string> RecImages(string const &epgid, string const &recfolder)
+		{
+			size_t delimPos = epgid.find_last_of('_');
+			string imageId = epgid.substr(delimPos+1);
+
+			list<string> images;
+			//Scan for all images in recording diretory (png and jpg)
+			ScanForRecImages(imageId, recfolder, images);
+			return images;
+		}
+
+
 		int ElapsedTime(time_t const startTime, time_t const endTime)
 		{
 			// Elapsed time is only meaningful when there is a non zero
diff --git a/PLUGINS/src/live/epg_events.h b/PLUGINS/src/live/epg_events.h
index 7d05b45..e73b1af 100644
--- a/PLUGINS/src/live/epg_events.h
+++ b/PLUGINS/src/live/epg_events.h
@@ -56,6 +56,11 @@ namespace vdrlive
 		std::list<std::string> EpgImages(std::string const &epgid);
 
 		/**
+		 *  Return a list of RecImages in the given folder.
+		 */
+		std::list<std::string> RecImages(std::string const &epgid, std::string const &recfolder);
+
+		/**
 		 *  Calculate the duration. A duration can be zero or
 		 *  negative. Negative durations are considered invalid by
 		 *  LIVE.
@@ -96,6 +101,8 @@ namespace vdrlive
 			virtual cChannel const * Channel() const { return 0; }
 
 			virtual std::string const Archived() const { return ""; }
+			
+			virtual std::string const FileName() const { return ""; }
 
 			virtual std::string const StartTime(const char* format) const;
 
@@ -141,6 +148,8 @@ namespace vdrlive
 			virtual time_t GetStartTime() const;
 
 			virtual time_t GetEndTime() const;
+			
+			virtual std::string const FileName() const { return ""; }
 
 		private:
 			const std::string m_info;
@@ -171,6 +180,8 @@ namespace vdrlive
 			virtual time_t GetEndTime() const { return m_event->EndTime(); }
 
 			virtual cChannel const * Channel() const { return Channels.GetByChannelID(m_event->ChannelID());}
+			
+			virtual std::string const FileName() const { return ""; }
 
 		private:
 			cEvent const * m_event;
@@ -199,6 +210,9 @@ namespace vdrlive
 			virtual time_t GetEndTime() const { return 0; }
 
 			virtual cChannel const * Channel() const { return Channels.GetByChannelID(m_channelID);}
+			
+			virtual std::string const FileName() const { return ""; }
+
 
 		private:
 			tChannelID m_channelID;
@@ -229,6 +243,8 @@ namespace vdrlive
 			virtual std::string const LongDescr() const;
 
 			virtual std::string const Archived() const;
+			
+			virtual std::string const FileName() const;
 
 			virtual time_t GetStartTime() const;
 
diff --git a/PLUGINS/src/live/pages/epginfo.ecpp b/PLUGINS/src/live/pages/epginfo.ecpp
index 743dcb2..eebb450 100644
--- a/PLUGINS/src/live/pages/epginfo.ecpp
+++ b/PLUGINS/src/live/pages/epginfo.ecpp
@@ -125,7 +125,7 @@ using namespace std;
 			tools_component = "epginfo.epgTools";
 		}
 </%cpp>
-		<& pageelems.epg_tt_box boxId=(epgEvent->Id()) caption=(epgEvent->Caption()) tools_comp=(tools_component) time=(start) title=(epgEvent->Title()) short_descr=(epgEvent->ShortDescr()) long_descr=(epgEvent->LongDescr()) archived=(epgEvent->Archived()) elapsed=(epgEvent->Elapsed()) &>
+		<& pageelems.epg_tt_box boxId=(epgEvent->Id()) caption=(epgEvent->Caption()) tools_comp=(tools_component) time=(start) title=(epgEvent->Title()) short_descr=(epgEvent->ShortDescr()) long_descr=(epgEvent->LongDescr()) archived=(epgEvent->Archived()) elapsed=(epgEvent->Elapsed()) filename=(epgEvent->FileName()) &>
 <%cpp>
 	}
 	if (aboutBox) {
diff --git a/PLUGINS/src/live/pages/pageelems.ecpp b/PLUGINS/src/live/pages/pageelems.ecpp
index 2be03a0..37df350 100644
--- a/PLUGINS/src/live/pages/pageelems.ecpp
+++ b/PLUGINS/src/live/pages/pageelems.ecpp
@@ -327,6 +327,7 @@ int update_status(1);
 	string title;
 	string short_descr;
 	string long_descr;
+	string filename;
 	string archived;
 	int elapsed = -1;
 </%args>
@@ -358,6 +359,16 @@ int update_status(1);
 						<img src="/epgimages/<$ *it $>" class="epg_image"/>
 <%cpp>
 	}
+
+	list<string> images1 = EpgEvents::RecImages(boxId, filename);
+	size_t delimPos = boxId.find_last_of('_');
+        string recId = (delimPos)?boxId.substr(delimPos+1):boxId;
+
+	for(std::list<std::string>::iterator it = images1.begin(); it != images1.end(); ++it ) {
+</%cpp>
+						<img src="/recimages/<$ recId $>/<$ *it $>" class="epg_image"/>
+<%cpp>
+	}
 </%cpp>
 					</span>
 					<%cpp> reply.out() << StringEscapeAndBreak(long_descr); </%cpp>
diff --git a/PLUGINS/src/live/tntconfig.cpp b/PLUGINS/src/live/tntconfig.cpp
index 3325776..fe297fe 100644
--- a/PLUGINS/src/live/tntconfig.cpp
+++ b/PLUGINS/src/live/tntconfig.cpp
@@ -323,6 +326,14 @@ namespace vdrlive {
 				   "image/$2");
 		}
 
+		// rec images
+		MapUrl(app,
+                           "^/recimages/([^/]*)/([^/]*)\\.([^./]+)",
+                           "content",
+                           "",
+			   "/tmp/$1_$2.$3",
+			   "image/$3");
+
 		// select additional (not build in) javascript.
 		// WARNING: no path components with '.' in the name are allowed. Only
 		// the basename may contain dots and must end with '.js'
